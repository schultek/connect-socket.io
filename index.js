
const platform = require('connect-platform');

const {setupSocketInstance} = require("./instance")
/**
 * In order to start the socket.io server, we need the http server of the express app. 
 * Currently the only way to get it is to hijack the .listen function of the express instance that is called 
 * during platform startup.
 */
platform.subscribe("bind", () => {

  // get and bind the .listen() function of the express instance.
  let listen = platform.app.listen.bind(platform.app);

  // register our own function handler to implement our custom websocket logic.
  platform.app.listen = (port, cb) => {

    // call the original handler and store the http server
    let server = listen(port, cb);

    setupSocketInstance(server);

    return server;
  }
})

/**
 *
 * so this is where you define the package details for CONNECT platform.
 * these details are confined to 'module.exports.platform', to allow for packages
 * that would work outside of the context of CONNECT platform as well.
 *
 */
module.exports.platform = {
  /**
   *
   * these are the configurations of your package.
   *
   */
  config: {
    /**
     *
     * these are the nodes introduced by your package.
     * you should specify the nodes your package offers based on
     * their type. node types can be one of the following:
     *
     * - native: i.e. nodes written in javascript.
     * - json: i.e. nodes generated by CONNECT platform itself.
     * - module: i.e. other CONNECT packages your package is dependant on. these can
     *          be included locally or can be external packages, in which case the platform
     *          will try to fetch and install them upon initialization.
     *
     */
    nodes : {
      /**
       *
       * reference native modules (and json modules as well) relative to root of your
       * package, without the extension.
       *
       */
      native : ['nodes/emit', 'nodes/broadcast']
    },
    /**
     *
     * aliases help you declare more generic addresses for your nodes.
     * for example, you might be aliasing '/firestore/insert' to '/db/insert',
     * so that other nodes and packages of the user will be using them without
     * being aware that 'db' is actually 'firestore'.
     *
     */
    aliases: {
      '/socket/emit': '/connect-socket.io/emit',
      '/socket/broadcast': '/connect-socket.io/broadcast'
    }
  },
  hints: {
    sampleConfig: {
      "socket-config": {
        "event-prefix": "/socket/on/",
        "event-map": {
          "connect": "custom-connect-node",
          "disconnect": "custom-disconnect-node"
        }
      }
    }
  }
}
